[project]
name = "PopUp-Sim"
description = "Freight rail transport simulation tool for Digital Automatic Coupler retrofit"
version = "0.0.1"
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Jan-Hendrik Wendisch", email = "jan-hendrik.wendisch@deutschebahn.com" },
    { name = "Volker Kuehn", email = "volker.kuehn@deutschebahn.com" },
    { name = "Hueseyin H. Guerbuez", email = "Hueseyin.H.Guerbuez@deutschebahn.com"}
]
keywords = ["railway", "digital automatic coupler", "simulation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "matplotlib>=3.10.7",
    "pandas>=2.3.3",
    "pydantic>=2.12.3",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.14.1",
    "simpy>=4.1.1",
    "typer>=0.20.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
dev = [
    "mypy>=1.18.1",
    "pre-commit>=4.3.0",
    "pre-commit-hooks>=6.0.0",
    "pylint>=3.3.8",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.0",
    "pandas>=2.3.0",
    "pydantic>=2.12.0",
    "pandas-stubs>=2.3.2.240528",
    "typer>=0.20.0",
]

# Preserving all tool configurations
[tool.ruff]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = ["F", "B", "S", "C4", "DTZ", "ARG", "I", "SIM", "N", "C90", "PLR09", "RUF"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Allow use of assert in tests
    "PLR2004", # Allow magic values in tests (common in assertions)
    "E501",    # Allow long lines in test assertions
]

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.pylint.format]
max-line-length = 120

[tool.pylint]
load-plugins = "pylint_pydantic"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
files = ["src", "tests"]
disable_error_code = ["annotation-unchecked"]
namespace_packages = true
explicit_package_bases = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["typer.*", "simpy.*", "matplotlib.*", "pytest.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pandas.*", "pydantic.*"]
ignore_missing_imports = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (external APIs)",
    "pending: Tests written before implementation (TDD)",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
show_missing = true

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "ruff>=0.14.1",
]
