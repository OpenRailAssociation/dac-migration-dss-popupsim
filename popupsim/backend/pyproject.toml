[project]
name = "PopUpSim"
description = "Freight rail transport simulation tool for Digital Automatic Coupler retrofit"
version = "0.0.1"
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Jan-Hendrik Wendisch", email = "jan-hendrik.wendisch@deutschebahn.com" },
    { name = "Volker Kuehn", email = "volker.kuehn@deutschebahn.com" },
    { name = "Hueseyin H. Guerbuez", email = "Hueseyin.H.Guerbuez@deutschebahn.com"}
]
keywords = ["railway", "digital automatic coupler", "simulation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "matplotlib>=3.10.7",
    "pandas>=2.3.3",
    "pydantic>=2.12.3",
    "simpy>=4.1.1",
    "typer>=0.20.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# Preserving all tool configurations
[tool.ruff]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true
known-first-party = ["configuration"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint]
select = [
"A",     # flake8-builtins
"ANN",   # flake8-annotations
"ARG",   # flake8-unused-arguments
"B",     # flake8-bugbear
"C4",    # flake8-comprehensions
"C90",   # mccabe complexity
"D",     # pydocstyle
"DTZ",   # flake8-datetimez
"E",     # pycodestyle errors
"F",     # pyflakes
"FIX",   # flake8-fixme
"G",     # flake8-logging-format
"I",     # isort
"N",     # pep8-naming
"NPY",   # numpy-specific rules
"PLR09", # pylint refactor rules
"PT",    # flake8-pytest-style
"Q",     # flake8-quotes
"RUF",   # ruff-specific rules
"S",     # flake8-bandit
"SIM",   # flake8-simplify
"TID251", # flake8-tidy-imports
"UP",    # pyupgrade
]
ignore = [
"D203",   # incompatible with D211
"D213",   # incompatible with D212
"Q000",   # incompatible with single quote format
"Q003",   # incompatible with single quote format
"ANN001", # missing type annotation for function argument (Pydantic validators)
"ANN204", # missing return type annotation for __init__ (always None)
"ANN206", # missing return type annotation for classmethod (Pydantic validators)
"ANN401", # dynamically typed expressions (pandas/Any types)
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Allow use of assert in tests
    "PLR2004", # Allow magic values in tests (common in assertions)
]
"src/main.py" = [
    "D401",    # Allow descriptive docstrings in main entry point
    "TID251", # Allow relative imports in main entry point
]

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.pylint.format]
max-line-length = 120

[tool.pylint]
load-plugins = "pylint_pydantic"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
files = ["src", "tests"]
namespace_packages = true
explicit_package_bases = true
show_column_numbers = true
show_error_codes = true
plugins = ['pydantic.mypy']


# Third-party libraries without stubs
[[tool.mypy.overrides]]
module = ["typer.*", "simpy.*", "matplotlib.*", "pytest.*"]
ignore_missing_imports = true
disallow_untyped_defs = false

# Libraries with stubs
[[tool.mypy.overrides]]
module = ["pandas.*", "pydantic.*"]
ignore_missing_imports = false

# Relaxed checking for tests
[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
warn_return_any = false
disable_error_code = ["var-annotated", "call-arg", "union-attr", "assignment"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (external APIs)",
    "pending: Tests written before implementation (TDD)",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
show_missing = true

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pre-commit-hooks>=6.0.0",
    "pylint>=3.3.8",
    "pylint-pydantic>=0.3.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.14.1",
    "pandas-stubs>=2.3.2.240528",
]
