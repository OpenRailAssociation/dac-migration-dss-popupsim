[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "PopUp-Sim"
description = "Freight rail transport simulation tool for Digital Automatic Coupler retrofit"
version = "0.1.0"
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Jan-Hendrik Wendisch", email = "jan-hendrik.wendisch@deutschebahn.com" },
    { name = "Volker Kuehn", email = "volker.kuehn@deutschebahn.com" }
]
keywords = ["railway", "digital automatic coupler", "simulation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = []

[project.scripts]
osm-extractor = "osm_extractor.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["backend/src", "tools/osm_extractor/src/osm_extractor"]

[dependency-groups]
dev = [
    "mypy>=1.18.1",
    "pre-commit>=4.3.0",
    "pre-commit-hooks>=6.0.0",
    "pylint>=3.3.8",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.0",
]
osm-extractor = [
    "matplotlib>=3.10.7",
    "numpy>=2.3.4",
    "overpy>=0.7",
    "shapely>=2.1.2",
    "typer>=0.19.2",
]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.format]
quote-style = "single"
indent-style = "tab"
docstring-code-format = true

[tool.ruff.lint]
select = ["F", "B", "S", "C4", "DTZ", "ARG", "I", "SIM", "N", "C90", "PLR09", "RUF"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.pylint.format]
max-line-length = 120
indent-string = '\t'

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
files = ["backend/src", "backend/tests", "tools/osm_extractor/src"]

[[tool.mypy.overrides]]
module = ["shapely.*", "overpy.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "osm_extractor.visualize"
ignore_errors = true

[tool.pytest.ini_options]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (external APIs)",
    "pending: Tests written before implementation (TDD)",
]

[tool.coverage.run]
source = ["backend/src", "tools/osm_extractor/src"]
omit = ["backend/tests/*", "tools/osm_extractor/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
precision = 2

[tool.coverage.paths]
source = [
    "backend/src",
    "tools/osm_extractor/src",
]
