[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "PopUp-Sim"
description = "Freight rail transport simulation tool for Digital Automatic Coupler retrofit"
version = "0.1.0"
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Jan-Hendrik Wendisch", email = "jan-hendrik.wendisch@deutschebahn.com" },
    { name = "Volker Kuehn", email = "volker.kuehn@deutschebahn.com" }
]
keywords = ["railway", "digital automatic coupler", "simulation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = []

[tool.hatch.build.targets.wheel]
packages = ["backend/src"]

[dependency-groups]
dev = [
    "mypy>=1.18.1",
    "pre-commit>=4.3.0",
    "pre-commit-hooks>=6.0.0",
    "pylint>=3.3.8",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.0",
]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.format]
quote-style = "single"
indent-style = "tab"
docstring-code-format = true

[tool.ruff.lint]
select = ["F", "B", "C4", "ARG", "SIM"]

[tool.pylint.format]
max-line-length = 120

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
files = ["backend/src", "backend/tests"]

[tool.pytest.ini_options]
testpaths = ["backend/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=popup_sim",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (external APIs)",
    "pending: Tests written before implementation (TDD)",
]

[tool.coverage.run]
source = ["backend/src"]
omit = ["backend/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
show_missing = true