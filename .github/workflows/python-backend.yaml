name : Python backend

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/python-backend.yaml'
      - '.github/workflows/setup-python/**'
      - 'pyproject.toml'
      - 'uv.lock'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/setup-python/**'
      - 'pyproject.toml'
      - 'uv.lock'

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Format with ruff
        run: uv run ruff format --check --diff .

  ruff:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Lint with ruff (annotations)
        run: uv run ruff check --output-format=github .
      - name: Generate SARIF report
        run: uv run ruff check --output-format=sarif --exit-zero -o ruff-results.sarif .
        if: always()
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ruff-results.sarif
        if: always()

  pylint:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Lint with pylint
        run: uv run pylint backend/src/ --output-format=github,json:pylint-report.json
      - name: Upload pylint report
        uses: actions/upload-artifact@v4
        with:
          name: pylint-report
          path: pylint-report.json
        if: always()

  mypy:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Add mypy problem matcher
        run: echo "::add-matcher::.github/problem-matchers/mypy.json"
      - name: Type check with mypy
        run: uv run mypy backend/src/ --show-error-codes --no-error-summary --show-column-numbers
      - name: Remove mypy problem matcher
        run: echo "::remove-matcher owner=mypy::"
        if: always()
      - name: Generate mypy JSON report
        run: uv run mypy backend/src/ --show-error-codes --no-error-summary --output json --exit-zero > mypy-report.json
        if: always()
      - name: Upload mypy report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: mypy-report.json
        if: always()

  test:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Test with pytest
        run: uv run pytest --tb=short || true
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: hashFiles('coverage.xml') != ''
        with:
          file: ./coverage.xml
          fail_ci_if_error: false