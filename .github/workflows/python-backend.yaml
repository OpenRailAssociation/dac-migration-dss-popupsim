name : Python backend

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/python-backend.yaml'
      - '.github/workflows/setup-python/**'
      - 'pyproject.toml'
      - 'uv.lock'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/setup-python/**'
      - 'pyproject.toml'
      - 'uv.lock'

jobs:
  format:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Check code formatting with ruff
        run: uv run ruff format --check --diff .
      - name: Summary
        run: echo "✅ Code formatting check completed" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
        if: failure()

  ruff:
    name: Ruff Linting
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Lint with ruff (annotations)
        run: uv run ruff check --output-format=github .
      - name: Generate SARIF report
        run: uv run ruff check --output-format=sarif --exit-zero -o ruff-results.sarif .
        if: always()
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ruff-results.sarif
        if: always()
      - name: Summary
        run: echo "✅ Ruff linting completed successfully" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "⚠️ Ruff found linting issues" >> $GITHUB_STEP_SUMMARY
        if: failure()

  pylint:
    name: Pylint Analysis
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Lint with pylint
        run: uv run pylint backend/src/ --output-format=github,json:pylint-report.json
      - name: Upload pylint report
        uses: actions/upload-artifact@v4
        with:
          name: pylint-report
          path: pylint-report.json
        if: always()
      - name: Summary
        run: echo "✅ Pylint analysis completed successfully" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "⚠️ Pylint found code quality issues" >> $GITHUB_STEP_SUMMARY
        if: failure()

  mypy:
    name: Type Checking
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Add mypy problem matcher
        run: echo "::add-matcher::.github/problem-matchers/mypy.json"
      - name: Type check with mypy
        run: uv run mypy backend/src/ --show-error-codes --no-error-summary --show-column-numbers
      - name: Remove mypy problem matcher
        run: echo "::remove-matcher owner=mypy::"
        if: always()
      - name: Generate mypy JSON report
        run: uv run mypy backend/src/ --show-error-codes --no-error-summary --output json --exit-zero > mypy-report.json
        if: always()
      - name: Upload mypy report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: mypy-report.json
        if: always()
      - name: Summary
        run: echo "✅ Type checking completed successfully" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "⚠️ MyPy found type issues" >> $GITHUB_STEP_SUMMARY
        if: failure()

  security:
    name: Security Scan
    needs: format
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Setup Python production environment
        uses: ./.github/setup-python/dev.yml
      - name: Export production requirements
        # Use requirements.txt instead of uv.lock to exclude dev dependencies
        # Syft can read uv.lock but cannot filter dev dependencies
        run: uv export --no-dev --format requirements-txt > requirements-prod.txt
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: requirements-prod.txt
          format: spdx-json
          artifact-name: sbom.spdx.json
      - name: Scan vulnerabilities with Grype
        uses: anchore/scan-action@v6
        id: scan
        with:
          path: sbom.spdx.json
          fail-build: false
          output-format: sarif

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
        if: always()
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            sbom.json
            grype-report.json
        if: always()
      - name: Summary
        run: echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "⚠️ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
        if: failure()

  test:
    name: Tests & Coverage
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python development environment
        uses: ./.github/setup-python/dev.yml
      - name: Test with pytest
        run: uv run pytest --tb=short || true
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: hashFiles('coverage.xml') != ''
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
      - name: Summary
        run: echo "✅ Tests completed successfully" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
        if: failure()