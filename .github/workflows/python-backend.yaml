name : Python backend

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/python-backend.yml'
      - 'pyproject.toml'
      - 'uv.lock'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/python-backend.yml'
      - 'pyproject.toml'
      - 'uv.lock'

jobs:
  format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: Format with ruff
        run: uv run ruff format --check --diff .

  lint:
    needs: format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.13"
        linter:
          - ruff
          - pylint
          - mypy
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: Lint with ruff
        if: matrix.linter == 'ruff'
        run: uv run ruff check --output-format=github .
      - name: Lint with pylint
        if: matrix.linter == 'pylint'
        run: uv run pylint backend/src/ --output-format=colorized
      - name: Type check with mypy
        if: matrix.linter == 'mypy'
        run: uv run mypy backend/src/ --show-error-codes

  security:
    name: Security Scan
    needs: format
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Setup Python production environment
        uses: ./.github/setup-python/dev.yml
      - name: Export production requirements
        # Use requirements.txt instead of uv.lock to exclude dev dependencies
        # Syft can read uv.lock but cannot filter dev dependencies
        run: uv export --no-dev --format requirements-txt > requirements-prod.txt
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: requirements-prod.txt
          format: spdx-json
          artifact-name: sbom.spdx.json
      - name: Scan vulnerabilities with Grype
        uses: anchore/scan-action@v6
        id: scan
        with:
          path: sbom.spdx.json
          fail-build: false
          output-format: sarif

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
        if: always()
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            sbom.json
            grype-report.json
        if: always()
      - name: Summary
        run: echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        if: success()
      - name: Summary
        run: echo "⚠️ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
        if: failure()

  test:
    needs: format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: Test with pytest
        run: uv run pytest --tb=short || true
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11' && hashFiles('coverage.xml') != ''
        with:
          file: ./coverage.xml
          fail_ci_if_error: false